[
	{
		"label": "JSONFile",
		"type": "class"
	},
	{
		"label": "click",
		"type": "function",
		"detail": "Simulates a mouse click at the given coordinates.\n\nArgs:\n    x (int, optional): X-coordinate. If None, uses current position.\n    y (int, optional): Y-coordinate. If None, uses current position.\n    button (str): Mouse button ('left', 'right', 'middle'). Defaults to 'left'.",
		"info": "(x: int = None, y: int = None, button: str = 'left', delay: float = None) -> None"
	},
	{
		"label": "cmd",
		"type": "function",
		"detail": "Executes a command in the command line.\n\nArgs:\n    command (str): Command to execute.",
		"info": "(command: str, popen=False) -> None"
	},
	{
		"label": "download",
		"type": "function",
		"detail": "Downloads a file from the specified URL and saves it to the given directory.\nHandles HTTP 302 redirects and returns the final path of the downloaded file.\n\nArgs:\n    url (str): URL of the file to download.\n    directory (str): Directory to save the file. Defaults to 'download'.\n\nReturns:\n    str: The final path of the downloaded file.",
		"info": "(url: str, directory: str = 'download') -> str"
	},
	{
		"label": "drag",
		"type": "function",
		"detail": "Simulates mouse dragging from one set of coordinates to another.\n\nArgs:\n    x (int, optional): Starting X-coordinate. If None, uses current position.\n    y (int, optional): Starting Y-coordinate. If None, uses current position.\n    x1 (int, optional): Ending X-coordinate. If None, uses current position.\n    y1 (int, optional): Ending Y-coordinate. If None, uses current position.\n    button (str): Mouse button ('left', 'right', 'middle'). Defaults to 'left'.",
		"info": "(x: int = None, y: int = None, x1: int = None, y1: int = None, button: str = 'left', duration: float = 0) -> None"
	},
	{
		"label": "fullscreen",
		"type": "function",
		"detail": "Toggles the active window to fullscreen mode.\n\nArgs:\n    absolute (bool): If True, uses F11 for absolute fullscreen mode.",
		"info": "(absolute: bool = False, delay: float = None) -> None"
	},
	{
		"label": "get_computer",
		"type": "function",
		"detail": "Returns computer data from controlhub pocketbase db",
		"info": "() -> controlhub.models.ComputerResponse"
	},
	{
		"label": "get_execution",
		"type": "function",
		"detail": "Returns execution data from controlhub pocketbase db",
		"info": "() -> controlhub.models.ExecutionResponse"
	},
	{
		"label": "get_offline_computer",
		"type": "function",
		"detail": "Returns computer data from env",
		"info": "() -> controlhub.models.ComputerResponse"
	},
	{
		"label": "get_position",
		"type": "function",
		"info": "() -> tuple[int, int]"
	},
	{
		"label": "hold",
		"type": "function",
		"detail": "Simulates key presses.\n\nArgs:\n    *keys: Sequence of keys to press.\n\nExamples:\n    with hold(\"ctrl\", \"a\"):\n    with hold([\"ctrl\", \"a\"])",
		"info": "(*keys: Union[str, pynput.keyboard._win32.Key, Iterable[Union[str, pynput.keyboard._win32.Key]]], delay: float = None)"
	},
	{
		"label": "move",
		"type": "function",
		"detail": "Simulates mouse movement to the given coordinates.\n\nArgs:\n    x (int, optional): X-coordinate. If None, uses current position.\n    y (int, optional): Y-coordinate. If None, uses current position.",
		"info": "(x: int = None, y: int = None) -> None"
	},
	{
		"label": "open_file",
		"type": "function",
		"detail": "Opens a file in the appropriate application after converting it to an absolute path.\n\nArgs:\n    path (str): Path to the file to open.",
		"info": "(path: str, delay: float = None) -> None"
	},
	{
		"label": "open_url",
		"type": "function",
		"detail": "Opens a URL in the default web browser.\n\nArgs:\n    url (str): URL to open.",
		"info": "(url: str) -> None"
	},
	{
		"label": "press",
		"type": "function",
		"detail": "Presses keys on a keyboard.\n\nArgs:\n    *keys: Sequence of keys to press.\n    delay (float): Little delay between keys, by default `BASE_DELAY` seconds\n\nExamples:\n    press([\"ctrl\", \"a\"], \"backspace\")\n    press([\"Ctrl\", \"Alt\", \"Delete\"])\n    press(\"Caps_Lock\", \"caps\")",
		"info": "(*keys: Union[str, pynput.keyboard._win32.Key, Iterable[Union[str, pynput.keyboard._win32.Key]]], delay: float = None) -> None"
	},
	{
		"label": "reload_window",
		"type": "function",
		"detail": "Reloads the active window.",
		"info": "(delay: float = None) -> None"
	},
	{
		"label": "run_program",
		"type": "function",
		"detail": "Runs a program in the command line.\n\nArgs:\n    program_name (str): Name of the program to run.",
		"info": "(program_name: str, shell: bool = False, delay: float = None) -> None"
	},
	{
		"label": "switch_to_last_window",
		"type": "function",
		"detail": "Switches to the last active window.",
		"info": "(delay: float = None) -> None"
	},
	{
		"label": "switch_to_next_window",
		"type": "function",
		"detail": "Switches to the next active window.",
		"info": "(delay: float = None) -> None"
	},
	{
		"label": "update_computer",
		"type": "function",
		"detail": "Updates computer in controlhub pocketbase db\n\nArgs:\n    data (ComputerRecord: dict): Changed computer",
		"info": "(data: controlhub.models.ComputerRecord) -> controlhub.models.ExecutionResponse"
	},
	{
		"label": "update_execution",
		"type": "function",
		"detail": "Updates execution in controlhub pocketbase db\n\nArgs:\n    data (ExecutionRecord: dict): Changed execution",
		"info": "(data: controlhub.models.ExecutionRecord) -> controlhub.models.ExecutionResponse"
	},
	{
		"label": "write",
		"type": "function",
		"detail": "Simulates keyboard input of the given text.\n\nArgs:\n    text (str): Text to type.\n    delay (float): Little delay after written text, by default 0 seconds\n    enter_delay (float): Little delay between lines and enter presses, by default `BASE_DELAY` * 4 seconds",
		"info": "(text: str, delay: float = None, enter_delay: float = None) -> None"
	},
	{
		"label": "cmd",
		"type": "function",
		"detail": "Executes a command in the command line.\n\nArgs:\n    command (str): Command to execute.",
		"info": "(command: str, popen=False) -> None"
	},
	{
		"label": "fullscreen",
		"type": "function",
		"detail": "Toggles the active window to fullscreen mode.\n\nArgs:\n    absolute (bool): If True, uses F11 for absolute fullscreen mode.",
		"info": "(absolute: bool = False, delay: float = None) -> None"
	},
	{
		"label": "open_file",
		"type": "function",
		"detail": "Opens a file in the appropriate application after converting it to an absolute path.\n\nArgs:\n    path (str): Path to the file to open.",
		"info": "(path: str, delay: float = None) -> None"
	},
	{
		"label": "press",
		"type": "function",
		"detail": "Presses keys on a keyboard.\n\nArgs:\n    *keys: Sequence of keys to press.\n    delay (float): Little delay between keys, by default `BASE_DELAY` seconds\n\nExamples:\n    press([\"ctrl\", \"a\"], \"backspace\")\n    press([\"Ctrl\", \"Alt\", \"Delete\"])\n    press(\"Caps_Lock\", \"caps\")",
		"info": "(*keys: Union[str, pynput.keyboard._win32.Key, Iterable[Union[str, pynput.keyboard._win32.Key]]], delay: float = None) -> None"
	},
	{
		"label": "reload_window",
		"type": "function",
		"detail": "Reloads the active window.",
		"info": "(delay: float = None) -> None"
	},
	{
		"label": "run_program",
		"type": "function",
		"detail": "Runs a program in the command line.\n\nArgs:\n    program_name (str): Name of the program to run.",
		"info": "(program_name: str, shell: bool = False, delay: float = None) -> None"
	},
	{
		"label": "switch_to_last_window",
		"type": "function",
		"detail": "Switches to the last active window.",
		"info": "(delay: float = None) -> None"
	},
	{
		"label": "switch_to_next_window",
		"type": "function",
		"detail": "Switches to the next active window.",
		"info": "(delay: float = None) -> None"
	},
	{
		"label": "write",
		"type": "function",
		"detail": "Simulates keyboard input of the given text.\n\nArgs:\n    text (str): Text to type.\n    delay (float): Little delay after written text, by default 0 seconds\n    enter_delay (float): Little delay between lines and enter presses, by default `BASE_DELAY` * 4 seconds",
		"info": "(text: str, delay: float = None, enter_delay: float = None) -> None"
	},
	{
		"label": "merge_dicts",
		"type": "function",
		"detail": "Merges two dictionaries into one. If there are duplicate keys, the values from dict2 will overwrite those in dict1 except if values are dictionaries, then they will be merged recursively.\n\nArgs:\n    dict1 (dict): The first dictionary.\n    dict2 (dict): The second dictionary.\n\nReturns:\n    dict: A new dictionary containing the merged data.",
		"info": "(dict1: dict, dict2: dict) -> dict"
	},
	{
		"label": "click",
		"type": "function",
		"detail": "Simulates a mouse click at the given coordinates.\n\nArgs:\n    x (int, optional): X-coordinate. If None, uses current position.\n    y (int, optional): Y-coordinate. If None, uses current position.\n    button (str): Mouse button ('left', 'right', 'middle'). Defaults to 'left'.",
		"info": "(x: int = None, y: int = None, button: str = 'left', delay: float = None) -> None"
	},
	{
		"label": "convert_keys",
		"type": "function",
		"detail": "Converts a list of keys to their corresponding classes.\n\nArgs:\n    *keys (Union[str, Key]): A list of keys to be converted.",
		"info": "(*keys: Union[str, pynput.keyboard._win32.Key, Iterable[Union[str, pynput.keyboard._win32.Key]]]) -> Iterable[Union[str, pynput.keyboard._win32.Key, Iterable[Union[str, pynput.keyboard._win32.Key]]]]"
	},
	{
		"label": "drag",
		"type": "function",
		"detail": "Simulates mouse dragging from one set of coordinates to another.\n\nArgs:\n    x (int, optional): Starting X-coordinate. If None, uses current position.\n    y (int, optional): Starting Y-coordinate. If None, uses current position.\n    x1 (int, optional): Ending X-coordinate. If None, uses current position.\n    y1 (int, optional): Ending Y-coordinate. If None, uses current position.\n    button (str): Mouse button ('left', 'right', 'middle'). Defaults to 'left'.",
		"info": "(x: int = None, y: int = None, x1: int = None, y1: int = None, button: str = 'left', duration: float = 0) -> None"
	},
	{
		"label": "get_position",
		"type": "function",
		"info": "() -> tuple[int, int]"
	},
	{
		"label": "hold",
		"type": "function",
		"detail": "Simulates key presses.\n\nArgs:\n    *keys: Sequence of keys to press.\n\nExamples:\n    with hold(\"ctrl\", \"a\"):\n    with hold([\"ctrl\", \"a\"])",
		"info": "(*keys: Union[str, pynput.keyboard._win32.Key, Iterable[Union[str, pynput.keyboard._win32.Key]]], delay: float = None)"
	},
	{
		"label": "move",
		"type": "function",
		"detail": "Simulates mouse movement to the given coordinates.\n\nArgs:\n    x (int, optional): X-coordinate. If None, uses current position.\n    y (int, optional): Y-coordinate. If None, uses current position.",
		"info": "(x: int = None, y: int = None) -> None"
	},
	{
		"label": "press",
		"type": "function",
		"detail": "Presses keys on a keyboard.\n\nArgs:\n    *keys: Sequence of keys to press.\n    delay (float): Little delay between keys, by default `BASE_DELAY` seconds\n\nExamples:\n    press([\"ctrl\", \"a\"], \"backspace\")\n    press([\"Ctrl\", \"Alt\", \"Delete\"])\n    press(\"Caps_Lock\", \"caps\")",
		"info": "(*keys: Union[str, pynput.keyboard._win32.Key, Iterable[Union[str, pynput.keyboard._win32.Key]]], delay: float = None) -> None"
	},
	{
		"label": "write",
		"type": "function",
		"detail": "Simulates keyboard input of the given text.\n\nArgs:\n    text (str): Text to type.\n    delay (float): Little delay after written text, by default 0 seconds\n    enter_delay (float): Little delay between lines and enter presses, by default `BASE_DELAY` * 4 seconds",
		"info": "(text: str, delay: float = None, enter_delay: float = None) -> None"
	},
	{
		"label": "get_computer",
		"type": "function",
		"detail": "Returns computer data from controlhub pocketbase db",
		"info": "() -> controlhub.models.ComputerResponse"
	},
	{
		"label": "get_execution",
		"type": "function",
		"detail": "Returns execution data from controlhub pocketbase db",
		"info": "() -> controlhub.models.ExecutionResponse"
	},
	{
		"label": "get_offline_computer",
		"type": "function",
		"detail": "Returns computer data from env",
		"info": "() -> controlhub.models.ComputerResponse"
	},
	{
		"label": "update_computer",
		"type": "function",
		"detail": "Updates computer in controlhub pocketbase db\n\nArgs:\n    data (ComputerRecord: dict): Changed computer",
		"info": "(data: controlhub.models.ComputerRecord) -> controlhub.models.ExecutionResponse"
	},
	{
		"label": "update_execution",
		"type": "function",
		"detail": "Updates execution in controlhub pocketbase db\n\nArgs:\n    data (ExecutionRecord: dict): Changed execution",
		"info": "(data: controlhub.models.ExecutionRecord) -> controlhub.models.ExecutionResponse"
	},
	{
		"label": "download",
		"type": "function",
		"detail": "Downloads a file from the specified URL and saves it to the given directory.\nHandles HTTP 302 redirects and returns the final path of the downloaded file.\n\nArgs:\n    url (str): URL of the file to download.\n    directory (str): Directory to save the file. Defaults to 'download'.\n\nReturns:\n    str: The final path of the downloaded file.",
		"info": "(url: str, directory: str = 'download') -> str"
	},
	{
		"label": "open_url",
		"type": "function",
		"detail": "Opens a URL in the default web browser.\n\nArgs:\n    url (str): URL to open.",
		"info": "(url: str) -> None"
	}
]
